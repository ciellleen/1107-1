# 포인터와 배열의 관계

배열은 자료형이 같은 변수를 메모리에 연속으로 할당한 것

따라서, 각 배열 요소는 일정한 간격으로 주소를 가짐.

예를 들어 int arr[4];의 배열이 메모리 100번지부터 할당되어 있다면, 메모리의 구조는 이렇게 구성될 것.

int형 변수는 4바이트이기 때문에 각 배열 요소의 주소는 100, 104, 108, 112번지가 됨.

결국, 첫 번째 요소의 주소를 알면 나머지 요소의 주소도 쉽게 알 수 있음. 

따라서 컴파일러는 첫 번째 요소의 주소를 쉽게 사용하도록 배열명을 첫번째 배열 요소의 주소로 변경함.

즉, 배열의 이름은 배열의 시작 주소 값임.

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/43f4c680-a7ab-4f2d-b233-d37ec40472ce/f1b5d397-f437-4b46-8655-0dd97c1231f6/image.png)

```c
#include <stdio.h>
 
int main(void)
{
    int arr[3] = {1, 2, 3};
 
    printf("배열의 이름 : %p\n", arr);
 
    printf("첫 번째 요소 : %p\n", &arr[0]);
    printf("두 번째 요소 : %p\n", &arr[1]);
    printf("세 번째 요소 : %p\n", &arr[2]);
 
    return 0;
}
```

<aside>
💡

실행 결과: 

| `배열의 이름 : 005AFA14
첫 번째 요소 : 005AFA14
두 번째 요소 : 005AFA18
세 번째 요소 : 005AFA1C` |  |
| --- | --- |
</aside>

배열의 첫번쨰 주소값이 005afa14인데, 배열의 이름을 출력한 결과도 005afa14로 결과가 같음.

주소값을 저장할 수 있는 변수는 포인터 변수 뿐, 여기서 일단 배열의 이름은 포인터 변수임을 알 수 있음.

하지만 배열의 이름은 값의 저장이 불가능하고(대입연산자의 피연산자가 될 수 없음.) 주소 값의 변경이 불가능함.

그래서 배열의 이름을 ‘상수 형태의 포인터’, ‘포인터 상수’라고 부르기도 함.

---

# 포인터 연산

포인터 연산은 +,-,++,— 연산자를 사용하여 포인터 값을 증가/감소시키는 연산임.

예를 들어 크기가 4바이트인 int형 변수의 주소 100번지에 1을 더한 결과는 101이 아닌 104가 됨.

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/43f4c680-a7ab-4f2d-b233-d37ec40472ce/f56f6824-afdf-4d41-bddc-8c3317336932/image.png)

```c
#include <stdio.h>
 
int main(void)
{
    char * ptr1 = 0;    // 0 대신 NULL을 사용해도 됩니다.
    int * ptr2 = 0;    // 0 대신 NULL을 사용해도 됩니다.
    double * ptr3 = 0;    // 0 대신 NULL을 사용해도 됩니다.
 
    printf("%d번지, %d번지, %d번지\n", ptr1, ptr2, ptr3);
 
    ptr1++;
    ptr2++;
    ptr3++;
 
    printf("%d번지, %d번지, %d번지\n", ptr1, ptr2, ptr3);
 
    return 0;
}
```

<aside>
💡

실행 결과

```c
0번지, 0번지, 0번지
1번지, 4번지, 8번지
```

각 포인터들은 타입에 맞게 1, 4, 8 바이트씩 증가함.

</aside>

이러한 포인터의 연산 특성으로 인해서 배열 접근이 가능함.

7행에 선언된 포인터 변수 ptr은 int형 포인터이므로 값을 1증가시킬때마다 실제로는 4가 증가함.

아래 예제에서  *ptr, *(ptr+1), *(ptr+2), *(ptr+3), *(ptr+4)의 출력결과는 arr[0], arr[1], arr[2], arr[3], arr[4]의 출력결과와 모두 동일한 출력결과를 보임.

```c
#include <stdio.h>
 
int main(void)
{
    int arr[5] = { 1, 2, 3, 4, 5 };
 
    int * ptr = arr;
 
    printf("%d %d %d %d %d\n", *ptr, *(ptr + 1), *(ptr + 2), *(ptr + 3), *(ptr + 4));
    printf("%d %d %d %d %d\n", arr[0], arr[1], arr[2], arr[3], arr[4]);
 
    return 0;
}
```

<aside>
💡

실행 결과

```
1 2 3
1 2 3
1 2 3
1 2 3
```

</aside>

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/43f4c680-a7ab-4f2d-b233-d37ec40472ce/4f9b8a67-89d4-4c07-b921-7a6d7e853d0c/image.png)

이를 통해 arr[i] == *(arr+i)라는 결론을 내릴 수 있음.

---

# 포인터 배열

포인터 배열이란 배열 요소로 포인터 변수를 가지는 배열을 의미함.

즉, 포인터 변수로 이루어진 ‘배열’을 의미.

포인터 배열은 기본 자료형 배열과 크게 다르지 않음.

다만, 주소값을 저장할 수 있는 포인터 변수를 대상으로 선언된 배열일 뿐임.

포인터 배열을 선언할 때는 배열 요소의 자료형이 포인터형이므로 배열 이름 앞에 *을 붙이면 됨.

```c
#include <stdio.h>
 
int main(void)
{
    int num1 = 1, num2 = 2, num3 = 3;
    int * arr[3] = { &num1, &num2, &num3 };    // 포인터 배열 선언 및 초기화
 
    printf("주소값 : %p %p %p\n", arr[0], arr[1], arr[2]);
    printf("값 : %d %d %d\n", *arr[0], *arr[1], *arr[2]);
 
    return 0;
}
```

<aside>
💡

실행 결과

```
주소값 : 00EFFB24 00EFFB18 00EFFB0C
값 : 1 2 3
```

포인터 배열은 메모리에 연속해서 위치하지만 포인터 배열에 저장된 주소값은 연속성을 지니지 않습니다.

</aside>

포인터 배열과 변수의 관계를 그림으로 표현하면 다음과 같음.

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/43f4c680-a7ab-4f2d-b233-d37ec40472ce/c832aa02-75ef-4444-b8dd-3ea73e15b7f8/image.png)

포인터 배열은 다양한 응용이 가능함. 포인터 배열을 문자열을 저장할 수 있음. 문자열 배열은 문자열의 주소값을 저장하는 배열으로서 사실 char형 포인터 배열임.

“”(큰따옴표)로 묶인 문자열은 메모리 공간에 저장된 후 그 주소값이 반환됨. 그리고 저장된 메모리 공간의 시작 주소를 알려줌. 반환된 문자열의 주소값은 문자열 첫번째 문자의 주소임. 이렇게 char형 포인터 배열에 저장이 가능함.

```c
#include <stdio.h>
 
int main(void)
{
    char * strarr[3] = {"sejong", "university", "computer"};    // 문자열 배열 선언 및 초기화
 
    printf("%s %s %s\n", strarr[0], strarr[1], strarr[2]);
 
    return 0;
}
```

<aside>
💡

실행 결과
`sejong university computer`

</aside>

포인터 배열의 각 요소는 문자열 상수가 저장된 메모리에서 첫번째 문자열의 주소값을 저장하고 그 문자를 가리킨다.

따라서 이 값을 변환문자 %s로 출력하면 null문자가 나올 때까지 모든 문자를 차례로 출력하므로 하나의 문자열이 출력되는 것임.

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/43f4c680-a7ab-4f2d-b233-d37ec40472ce/778b9aae-2a4c-4759-ac15-a7abfc10f410/image.png)

---

# 배열 포인터

배열 포인터란 배열을 가리킬 수 있는 ‘포인터’를 의미함.

1차원 배열은 이름 자체가 포인터이기 때문에 배열 포인터가 필요 없음.

하지만 2차원 배열은 이름 자체로 포인터의 역할을 할 수 없음.

배열 포인터를 사용하는 이유는 2차원 이상의 배열을 가리킬 때 포인터를 배열처럼 사용하기 위함임.

다라서 배열 포인터는 2차원 이상의 배열에서만 의미를 가짐.

arr2d[0]과 arr2d[1]은 각 부분 배열의 시작 주소를 가리킴. arr2d[0]은 2차원 배열의 첫번째 행을 의미하고, arr2d[1]은 두 번째 행을 의미함.

```c
#include <stdio.h>
 
int main(void)
{
    int arr2d[2][3] = {
    {10, 20, 30},
    {40, 50, 60},
    };
 
    printf("%d %d\n", *arr2d[0], *arr2d[1]);
 
    return 0;
}
```

<aside>
💡

실행 결과

10 40

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/43f4c680-a7ab-4f2d-b233-d37ec40472ce/7eb66b37-3dee-49b5-866c-b0d631a0cb74/image.png)

</aside>

배열 포인터는 다음과 같이 정의함.

자료형(*포인터이름)[가로(행) 길이]

→ 포인터가 자료형쪽에 붙는게 아니라 포인터 변수 이름 쪽에 소괄호 안에 붙게 됨.

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/43f4c680-a7ab-4f2d-b233-d37ec40472ce/74f2b05c-a1e8-402a-886a-65f46781ea15/image.png)

- int: 가리킬 수 있는 대상에 대한 정보(즉, int형 변수를 가리키는 포인터)를 의미
- (*ptr): ptr은 포인터임을 의미
- [3]: 포인터 연산에 따른 증가/감소의 폭임.
    
    (값을 1증가시 int형이므로 4바이트*3 = 12바이트 이동)
    

다음 예제는 배열 포인터를 사용하여 배열과 같은 인덱싱 방법으로 배열 요소를 참조하는 예제임.

포인터에 배열 명을 저장하면 배열 포인터를 2차원 배열처럼 쓸 수 있음.

```c
#include <stdio.h>
 
int main(void)
{
    int arr2d[2][3] = {
    {10, 20, 30},
    {40, 50, 60},
    };
 
    int i, j;
 
    int (*ptr)[3] = arr2d;    // 배열 포인터 선언
 
    for (i = 0; i < 2; i++)
    {
        for (j = 0; j < 3; j++)
            printf("%d ", ptr[i][j]);    // 배열 포인터로 참조
        printf("\n");
    }
 
    return 0;
}
```

<aside>
💡

실행 결과

10 20 30

40 50 60

</aside>

앞서 1차원 배열에서 arr[i] == *(arr+i)라는 문장이 성립한다고 했음. 마찬가지로 2차원 배열에서도 arr[i] == *(arr+i) 임.

아래 수식들은 모두 같은 표현임.

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/43f4c680-a7ab-4f2d-b233-d37ec40472ce/f7440c7a-cd35-4e5c-b1fe-4623cef995b0/image.png)

결과를 확인하면 4문장 모두 같은 값을 나타내는 것을 확인할 수 있음.

```c
#include <stdio.h>
 
int main(void)
{
    int arr2d[2][3] = {
        {10, 20, 30},
        {40, 50, 60},
    };
    int i, j;
 
    for (i = 0; i < 2; i++)
    {
        for (j = 0; j < 3; j++)
        {
            printf("%d ", arr2d[i][j]);
            printf("%d ", (*(arr2d + i))[j]);
            printf("%d ", *(arr2d[i] + j));
            printf("%d\n", *(*(arr2d + i) + j));
        }
    }
 
    return 0;
}
```

<aside>
💡

실행 결과

```
10 10 10 10
20 20 20 20
30 30 30 30
40 40 40 40
50 50 50 50
60 60 60 60
```

</aside>

---

# 포인터 배열/배열 포인터 차이

포인터 배열과 배열 포인터는 비슷해 보임

하지만

- 포인터 ‘배열’은 주소값들을 저장하는 ‘배열’임.
- 배열 ‘포인터’는 배열의 시작주소값을 저장할 수 있는 ‘포인터’임.

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/43f4c680-a7ab-4f2d-b233-d37ec40472ce/0568d1a2-d53d-45e0-ba74-2916c3c2e72d/image.png)

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/43f4c680-a7ab-4f2d-b233-d37ec40472ce/e5da6750-5c4b-42bc-a70a-04d367ffc31e/image.png)

첫 번째는 int형 변수로 이루어진 int형 포인터 배열임.

두 번째는 가로 길이가 3인 int형 2차원 배열을 가리키는 포인터 변수임.

**`( )` (괄호)의 유무**가 중요.
